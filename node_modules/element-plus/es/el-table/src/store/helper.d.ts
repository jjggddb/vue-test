import { Table } from '../table/defaults';
import { TableProps } from '../table/defaults';
export declare function createStore<T>(table: Table<T>, props: TableProps<T>): {
    mutations: {
        setData(states: {
            _currentRowKey: import("@vue/reactivity").Ref<string>;
            currentRow: import("@vue/reactivity").Ref<T>;
            expandRowKeys: import("@vue/reactivity").Ref<string[]>;
            treeData: import("@vue/reactivity").Ref<unknown>;
            indent: import("@vue/reactivity").Ref<number>;
            lazy: import("@vue/reactivity").Ref<boolean>;
            lazyTreeNodeMap: import("@vue/reactivity").Ref<{}>;
            lazyColumnIdentifier: import("@vue/reactivity").Ref<string>;
            childrenColumnName: import("@vue/reactivity").Ref<string>;
            expandRows: import("@vue/reactivity").Ref<T[]>;
            defaultExpandAll: import("@vue/reactivity").Ref<boolean>;
            rowKey: import("@vue/reactivity").Ref<string>;
            data: import("@vue/reactivity").Ref<T[]>;
            _data: import("@vue/reactivity").Ref<T[]>;
            isComplex: import("@vue/reactivity").Ref<boolean>;
            _columns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            originColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            columns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            fixedColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            rightFixedColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            leafColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            fixedLeafColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            rightFixedLeafColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            leafColumnsLength: import("@vue/reactivity").Ref<number>;
            fixedLeafColumnsLength: import("@vue/reactivity").Ref<number>;
            rightFixedLeafColumnsLength: import("@vue/reactivity").Ref<number>;
            isAllSelected: import("@vue/reactivity").Ref<boolean>;
            selection: import("@vue/reactivity").Ref<T[]>;
            reserveSelection: import("@vue/reactivity").Ref<boolean>;
            selectOnIndeterminate: import("@vue/reactivity").Ref<boolean>;
            selectable: import("@vue/reactivity").Ref<(row: T, index: number) => boolean>;
            filters: import("@vue/reactivity").Ref<Record<string, string[]>>;
            filteredData: any;
            sortingColumn: any;
            sortProp: any;
            sortOrder: any;
            hoverRow: any;
        }, data: T[]): void;
        insertColumn(states: {
            _currentRowKey: import("@vue/reactivity").Ref<string>;
            currentRow: import("@vue/reactivity").Ref<T>;
            expandRowKeys: import("@vue/reactivity").Ref<string[]>;
            treeData: import("@vue/reactivity").Ref<unknown>;
            indent: import("@vue/reactivity").Ref<number>;
            lazy: import("@vue/reactivity").Ref<boolean>;
            lazyTreeNodeMap: import("@vue/reactivity").Ref<{}>;
            lazyColumnIdentifier: import("@vue/reactivity").Ref<string>;
            childrenColumnName: import("@vue/reactivity").Ref<string>;
            expandRows: import("@vue/reactivity").Ref<T[]>;
            defaultExpandAll: import("@vue/reactivity").Ref<boolean>;
            rowKey: import("@vue/reactivity").Ref<string>;
            data: import("@vue/reactivity").Ref<T[]>;
            _data: import("@vue/reactivity").Ref<T[]>;
            isComplex: import("@vue/reactivity").Ref<boolean>;
            _columns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            originColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            columns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            fixedColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            rightFixedColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            leafColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            fixedLeafColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            rightFixedLeafColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            leafColumnsLength: import("@vue/reactivity").Ref<number>;
            fixedLeafColumnsLength: import("@vue/reactivity").Ref<number>;
            rightFixedLeafColumnsLength: import("@vue/reactivity").Ref<number>;
            isAllSelected: import("@vue/reactivity").Ref<boolean>;
            selection: import("@vue/reactivity").Ref<T[]>;
            reserveSelection: import("@vue/reactivity").Ref<boolean>;
            selectOnIndeterminate: import("@vue/reactivity").Ref<boolean>;
            selectable: import("@vue/reactivity").Ref<(row: T, index: number) => boolean>;
            filters: import("@vue/reactivity").Ref<Record<string, string[]>>;
            filteredData: any;
            sortingColumn: any;
            sortProp: any;
            sortOrder: any;
            hoverRow: any;
        }, column: import("../table-column/defaults").TableColumnCtx<T>, parent: import("../table-column/defaults").TableColumnCtx<T>): void;
        removeColumn(states: {
            _currentRowKey: import("@vue/reactivity").Ref<string>;
            currentRow: import("@vue/reactivity").Ref<T>;
            expandRowKeys: import("@vue/reactivity").Ref<string[]>;
            treeData: import("@vue/reactivity").Ref<unknown>;
            indent: import("@vue/reactivity").Ref<number>;
            lazy: import("@vue/reactivity").Ref<boolean>;
            lazyTreeNodeMap: import("@vue/reactivity").Ref<{}>;
            lazyColumnIdentifier: import("@vue/reactivity").Ref<string>;
            childrenColumnName: import("@vue/reactivity").Ref<string>;
            expandRows: import("@vue/reactivity").Ref<T[]>;
            defaultExpandAll: import("@vue/reactivity").Ref<boolean>;
            rowKey: import("@vue/reactivity").Ref<string>;
            data: import("@vue/reactivity").Ref<T[]>;
            _data: import("@vue/reactivity").Ref<T[]>;
            isComplex: import("@vue/reactivity").Ref<boolean>;
            _columns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            originColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            columns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            fixedColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            rightFixedColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            leafColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            fixedLeafColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            rightFixedLeafColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            leafColumnsLength: import("@vue/reactivity").Ref<number>;
            fixedLeafColumnsLength: import("@vue/reactivity").Ref<number>;
            rightFixedLeafColumnsLength: import("@vue/reactivity").Ref<number>;
            isAllSelected: import("@vue/reactivity").Ref<boolean>;
            selection: import("@vue/reactivity").Ref<T[]>;
            reserveSelection: import("@vue/reactivity").Ref<boolean>;
            selectOnIndeterminate: import("@vue/reactivity").Ref<boolean>;
            selectable: import("@vue/reactivity").Ref<(row: T, index: number) => boolean>;
            filters: import("@vue/reactivity").Ref<Record<string, string[]>>;
            filteredData: any;
            sortingColumn: any;
            sortProp: any;
            sortOrder: any;
            hoverRow: any;
        }, column: import("../table-column/defaults").TableColumnCtx<T>, parent: import("../table-column/defaults").TableColumnCtx<T>): void;
        sort(states: {
            _currentRowKey: import("@vue/reactivity").Ref<string>;
            currentRow: import("@vue/reactivity").Ref<T>;
            expandRowKeys: import("@vue/reactivity").Ref<string[]>;
            treeData: import("@vue/reactivity").Ref<unknown>;
            indent: import("@vue/reactivity").Ref<number>;
            lazy: import("@vue/reactivity").Ref<boolean>;
            lazyTreeNodeMap: import("@vue/reactivity").Ref<{}>;
            lazyColumnIdentifier: import("@vue/reactivity").Ref<string>;
            childrenColumnName: import("@vue/reactivity").Ref<string>;
            expandRows: import("@vue/reactivity").Ref<T[]>;
            defaultExpandAll: import("@vue/reactivity").Ref<boolean>;
            rowKey: import("@vue/reactivity").Ref<string>;
            data: import("@vue/reactivity").Ref<T[]>;
            _data: import("@vue/reactivity").Ref<T[]>;
            isComplex: import("@vue/reactivity").Ref<boolean>;
            _columns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            originColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            columns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            fixedColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            rightFixedColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            leafColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            fixedLeafColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            rightFixedLeafColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            leafColumnsLength: import("@vue/reactivity").Ref<number>;
            fixedLeafColumnsLength: import("@vue/reactivity").Ref<number>;
            rightFixedLeafColumnsLength: import("@vue/reactivity").Ref<number>;
            isAllSelected: import("@vue/reactivity").Ref<boolean>;
            selection: import("@vue/reactivity").Ref<T[]>;
            reserveSelection: import("@vue/reactivity").Ref<boolean>;
            selectOnIndeterminate: import("@vue/reactivity").Ref<boolean>;
            selectable: import("@vue/reactivity").Ref<(row: T, index: number) => boolean>;
            filters: import("@vue/reactivity").Ref<Record<string, string[]>>;
            filteredData: any;
            sortingColumn: any;
            sortProp: any;
            sortOrder: any;
            hoverRow: any;
        }, options: import("../table/defaults").Sort): void;
        changeSortCondition(states: {
            _currentRowKey: import("@vue/reactivity").Ref<string>;
            currentRow: import("@vue/reactivity").Ref<T>;
            expandRowKeys: import("@vue/reactivity").Ref<string[]>;
            treeData: import("@vue/reactivity").Ref<unknown>;
            indent: import("@vue/reactivity").Ref<number>;
            lazy: import("@vue/reactivity").Ref<boolean>;
            lazyTreeNodeMap: import("@vue/reactivity").Ref<{}>;
            lazyColumnIdentifier: import("@vue/reactivity").Ref<string>;
            childrenColumnName: import("@vue/reactivity").Ref<string>;
            expandRows: import("@vue/reactivity").Ref<T[]>;
            defaultExpandAll: import("@vue/reactivity").Ref<boolean>;
            rowKey: import("@vue/reactivity").Ref<string>;
            data: import("@vue/reactivity").Ref<T[]>;
            _data: import("@vue/reactivity").Ref<T[]>;
            isComplex: import("@vue/reactivity").Ref<boolean>;
            _columns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            originColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            columns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            fixedColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            rightFixedColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            leafColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            fixedLeafColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            rightFixedLeafColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            leafColumnsLength: import("@vue/reactivity").Ref<number>;
            fixedLeafColumnsLength: import("@vue/reactivity").Ref<number>;
            rightFixedLeafColumnsLength: import("@vue/reactivity").Ref<number>;
            isAllSelected: import("@vue/reactivity").Ref<boolean>;
            selection: import("@vue/reactivity").Ref<T[]>;
            reserveSelection: import("@vue/reactivity").Ref<boolean>;
            selectOnIndeterminate: import("@vue/reactivity").Ref<boolean>;
            selectable: import("@vue/reactivity").Ref<(row: T, index: number) => boolean>;
            filters: import("@vue/reactivity").Ref<Record<string, string[]>>;
            filteredData: any;
            sortingColumn: any;
            sortProp: any;
            sortOrder: any;
            hoverRow: any;
        }, options: import("../table/defaults").Sort): void;
        filterChange(_states: {
            _currentRowKey: import("@vue/reactivity").Ref<string>;
            currentRow: import("@vue/reactivity").Ref<T>;
            expandRowKeys: import("@vue/reactivity").Ref<string[]>;
            treeData: import("@vue/reactivity").Ref<unknown>;
            indent: import("@vue/reactivity").Ref<number>;
            lazy: import("@vue/reactivity").Ref<boolean>;
            lazyTreeNodeMap: import("@vue/reactivity").Ref<{}>;
            lazyColumnIdentifier: import("@vue/reactivity").Ref<string>;
            childrenColumnName: import("@vue/reactivity").Ref<string>;
            expandRows: import("@vue/reactivity").Ref<T[]>;
            defaultExpandAll: import("@vue/reactivity").Ref<boolean>;
            rowKey: import("@vue/reactivity").Ref<string>;
            data: import("@vue/reactivity").Ref<T[]>;
            _data: import("@vue/reactivity").Ref<T[]>;
            isComplex: import("@vue/reactivity").Ref<boolean>;
            _columns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            originColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            columns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            fixedColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            rightFixedColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            leafColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            fixedLeafColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            rightFixedLeafColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            leafColumnsLength: import("@vue/reactivity").Ref<number>;
            fixedLeafColumnsLength: import("@vue/reactivity").Ref<number>;
            rightFixedLeafColumnsLength: import("@vue/reactivity").Ref<number>;
            isAllSelected: import("@vue/reactivity").Ref<boolean>;
            selection: import("@vue/reactivity").Ref<T[]>;
            reserveSelection: import("@vue/reactivity").Ref<boolean>;
            selectOnIndeterminate: import("@vue/reactivity").Ref<boolean>;
            selectable: import("@vue/reactivity").Ref<(row: T, index: number) => boolean>;
            filters: import("@vue/reactivity").Ref<Record<string, string[]>>;
            filteredData: any;
            sortingColumn: any;
            sortProp: any;
            sortOrder: any;
            hoverRow: any;
        }, options: import("../table/defaults").Filter<T>): void;
        toggleAllSelection(): void;
        rowSelectedChanged(_states: any, row: T): void;
        setHoverRow(states: {
            _currentRowKey: import("@vue/reactivity").Ref<string>;
            currentRow: import("@vue/reactivity").Ref<T>;
            expandRowKeys: import("@vue/reactivity").Ref<string[]>;
            treeData: import("@vue/reactivity").Ref<unknown>;
            indent: import("@vue/reactivity").Ref<number>;
            lazy: import("@vue/reactivity").Ref<boolean>;
            lazyTreeNodeMap: import("@vue/reactivity").Ref<{}>;
            lazyColumnIdentifier: import("@vue/reactivity").Ref<string>;
            childrenColumnName: import("@vue/reactivity").Ref<string>;
            expandRows: import("@vue/reactivity").Ref<T[]>;
            defaultExpandAll: import("@vue/reactivity").Ref<boolean>;
            rowKey: import("@vue/reactivity").Ref<string>;
            data: import("@vue/reactivity").Ref<T[]>;
            _data: import("@vue/reactivity").Ref<T[]>;
            isComplex: import("@vue/reactivity").Ref<boolean>;
            _columns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            originColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            columns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            fixedColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            rightFixedColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            leafColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            fixedLeafColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            rightFixedLeafColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
            leafColumnsLength: import("@vue/reactivity").Ref<number>;
            fixedLeafColumnsLength: import("@vue/reactivity").Ref<number>;
            rightFixedLeafColumnsLength: import("@vue/reactivity").Ref<number>;
            isAllSelected: import("@vue/reactivity").Ref<boolean>;
            selection: import("@vue/reactivity").Ref<T[]>;
            reserveSelection: import("@vue/reactivity").Ref<boolean>;
            selectOnIndeterminate: import("@vue/reactivity").Ref<boolean>;
            selectable: import("@vue/reactivity").Ref<(row: T, index: number) => boolean>;
            filters: import("@vue/reactivity").Ref<Record<string, string[]>>;
            filteredData: any;
            sortingColumn: any;
            sortProp: any;
            sortOrder: any;
            hoverRow: any;
        }, row: T): void;
        setCurrentRow(_states: any, row: T): void;
    };
    commit: (name: "setData" | "insertColumn" | "removeColumn" | "sort" | "changeSortCondition" | "filterChange" | "toggleAllSelection" | "rowSelectedChanged" | "setHoverRow" | "setCurrentRow", ...args: any[]) => void;
    updateTableScrollY: () => void;
    assertRowKey: () => void;
    updateColumns: () => void;
    scheduleLayout: (needUpdateColumns?: boolean, immediate?: boolean) => void;
    isSelected: (row: any) => boolean;
    clearSelection: () => void;
    cleanSelection: () => void;
    toggleRowSelection: (row: T, selected?: any, emitChange?: boolean) => void;
    _toggleAllSelection: () => void;
    toggleAllSelection: any;
    updateSelectionByRowKey: () => void;
    updateAllSelected: () => void;
    updateFilters: (columns: any, values: any) => {};
    updateCurrentRow: (_currentRow: T) => void;
    updateSort: (column: any, prop: any, order: any) => void;
    execFilter: () => void;
    execSort: () => void;
    execQuery: (ignore?: any) => void;
    clearFilter: (columnKeys: any) => void;
    clearSort: () => void;
    toggleRowExpansion: (row: T, expanded?: boolean) => void;
    setExpandRowKeysAdapter: (val: string[]) => void;
    setCurrentRowKey: (key: string) => void;
    toggleRowExpansionAdapter: (row: T, expanded: boolean) => void;
    isRowExpanded: (row: T) => boolean;
    updateExpandRows: () => void;
    updateCurrentRowData: () => void;
    loadOrToggle: (row: any) => void;
    states: {
        _currentRowKey: import("@vue/reactivity").Ref<string>;
        currentRow: import("@vue/reactivity").Ref<T>;
        expandRowKeys: import("@vue/reactivity").Ref<string[]>;
        treeData: import("@vue/reactivity").Ref<unknown>;
        indent: import("@vue/reactivity").Ref<number>;
        lazy: import("@vue/reactivity").Ref<boolean>;
        lazyTreeNodeMap: import("@vue/reactivity").Ref<{}>;
        lazyColumnIdentifier: import("@vue/reactivity").Ref<string>;
        childrenColumnName: import("@vue/reactivity").Ref<string>;
        expandRows: import("@vue/reactivity").Ref<T[]>;
        defaultExpandAll: import("@vue/reactivity").Ref<boolean>;
        rowKey: import("@vue/reactivity").Ref<string>;
        data: import("@vue/reactivity").Ref<T[]>;
        _data: import("@vue/reactivity").Ref<T[]>;
        isComplex: import("@vue/reactivity").Ref<boolean>;
        _columns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
        originColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
        columns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
        fixedColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
        rightFixedColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
        leafColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
        fixedLeafColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
        rightFixedLeafColumns: import("@vue/reactivity").Ref<import("../table-column/defaults").TableColumnCtx<T>[]>;
        leafColumnsLength: import("@vue/reactivity").Ref<number>;
        fixedLeafColumnsLength: import("@vue/reactivity").Ref<number>;
        rightFixedLeafColumnsLength: import("@vue/reactivity").Ref<number>;
        isAllSelected: import("@vue/reactivity").Ref<boolean>;
        selection: import("@vue/reactivity").Ref<T[]>;
        reserveSelection: import("@vue/reactivity").Ref<boolean>;
        selectOnIndeterminate: import("@vue/reactivity").Ref<boolean>;
        selectable: import("@vue/reactivity").Ref<(row: T, index: number) => boolean>;
        filters: import("@vue/reactivity").Ref<Record<string, string[]>>;
        filteredData: any;
        sortingColumn: any;
        sortProp: any;
        sortOrder: any;
        hoverRow: any;
    };
};
